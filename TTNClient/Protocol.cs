using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;

namespace IoT.Protocol
{
	#region ApiNodePacket
	/// <summary>
	/// 
	/// </summary>
	public class ApiNodePacket
	{
		public ApiNodePacket() { }
		public string gateway_eui { get; set; }
		public string data_raw { get; set; }
		public string data_plain { get; set; }
		public string data_json { get; set; }
		public double? rssi { get; set; }
		public DateTime time { get; set; }
		public string datarate { get; set; }
		public double? snr { get; set; }
		public string node_eui { get; set; }
		public string data { get; set; }
		public double? frequency { get; set; }

		public override string ToString()
		{
			return string.Format(
				CultureInfo.InvariantCulture,
				"node_eui:{0} time:{1} frequency:{2} rssi:{3} snr:{4} datarate:{5}",
				node_eui,
				time,
				frequency,
				rssi,
				snr,
				datarate
				);
		}
	}
	#endregion

	#region ApiGatewayStatus
	/// <summary>
	/// Respresent TTN gateway status message
	/// </summary>
	public class ApiGatewayStatus
	{
		public ApiGatewayStatus() { }

		public int? datagramsreceived { get; set; }
		public double? ackratio { get; set; }
		public int? rxforwarded { get; set; }
		public int? datagramssent { get; set; }
		public DateTime? time { get; set; }
		public double? altitude { get; set; }
		public string eui { get; set; }
		public int? rxok { get; set; }
		public double? latitude { get; set; }
		public double? longitude { get; set; }
		public int? rxcount { get; set; }
		public override string ToString()
		{
			return string.Format(
				CultureInfo.InvariantCulture,
				"eui:{0} time:{1} received:{2} forwarded:{3} sent:{4} rxok:{5} rxcount:{6} ...",
				eui,
				time,
				datagramsreceived,
				rxforwarded,
				datagramssent,
				rxok,
				rxcount
				);
		}
	}
	#endregion

	#region Gateway Packet
	public class GatewayPacket
	{
		/// <summary>
		/// Protocol version (1)
		/// </summary>
		public byte Version;

		/// <summary>
		/// Token
		/// </summary>
		public UInt16 Token;

		/// <summary>
		/// PUSH_DATA identifier (0x00)
		/// </summary>
		/// 
		public PACKET_TYPE PacketType;

		/// <summary>
		/// Gateway unique identifier (MAC address)
		/// </summary>
		public byte[] EUI;

		/// <summary>
		/// JSON raw data
		/// </summary>
		public string Json;

		/// <summary>
		/// Sender End Point
		/// </summary>
		public EndPoint Sender;

		/// <summary>
		/// Exception
		/// </summary>
		public Exception Exception;

		public override string ToString()
		{
			string eui = string.Empty;
			if (EUI != null)
				foreach (byte b in EUI)
					eui += b.ToString("X2");
			return string.Format(
				"{{Version: {0:X2}, Token:{1:X4}, Type: {2} ({3:X2}), EUI: {4}}}",
				Version,
				Token,
				PacketType, (byte)PacketType,
				eui
				);
		}


		public void SetEUI(byte[] buffer)
		{
			EUI = new byte[8];
			Array.Copy(buffer, 4, EUI, 0, 8);
		}
	}
	#endregion

	#region GatewayPushData
	public class GatewayPushData
	{
		public List<GatewayRxpk> rxpk { get; set; }
		public GatewayStat stat { get; set; }
	}

	public class GatewayPushDataV1 : GatewayPushData
	{
		public new List<GatewayRxpk> rxpk { get; set; }
	}

	public class GatewayPushDataV2 : GatewayPushData
	{
		public new List<GatewayRxpkV2> rxpk { get; set; }
	}
	#endregion

	#region GatewayRxpk
	public class GatewayRxpk
	{
		public virtual DateTime? DateTime { get; set; }
		public virtual UInt64? Time { get; set; }

		/// <summary>
		/// The value of the gateway internal time counter at the instant the LoRa frame was received,
		/// with microsecond granularity.
		/// The value will rollover approximately every 72 minutes.
		/// The timestamp values generated by different gateways are unrelated.
		/// </summary>
		public UInt32 tmst { get; set; }
		/// <summary>
		/// The centre frequency of the received signal in units of MHz. 
		/// </summary>
		public double freq { get; set; }
		/// <summary>
		/// Concentrator “IF” channel on which the frame was received
		/// </summary>
		public uint chan { get; set; }
		/// <summary>
		/// Concentrator radio frequency chain on which the frame was received
		/// </summary>
		public uint? rfch { get; set; }
		/// <summary>
		/// CRC status: 1 = OK, -1 = fail, 0 = no CRC
		/// </summary>
		public int stat { get; set; }
		/// <summary>
		/// Modulation identifier "LORA" or "FSK"
		/// </summary>
		public string modu { get; set; }
		/// <summary>
		/// LoRa datarate identifier (eg. SF12BW500)
		/// FSK datarate (unsigned, in bits per second)
		/// </summary>
		public string datr { get; set; }
		/// <summary>
		/// LoRa ECC coding rate identifier
		/// </summary>
		public string codr { get; set; }
		/// <summary>
		/// RSSI in dBm (signed integer, 1 dB precision)
		/// </summary>
		public int rssi { get; set; }
		/// <summary>
		/// Lora SNR ratio in dB (signed float, 0.1 dB precision)
		/// </summary>
		public double lsnr { get; set; }
		/// <summary>
		/// RF packet payload size in bytes (unsigned integer)
		/// </summary>
		public uint? size { get; set; }
		/// <summary>
		/// Base64 encoded RF packet payload, padded
		/// </summary>
		public string data { get; set; }
	}
	public class GatewayRxpkV1 : GatewayRxpk
	{
		/// <summary>
		/// UTC time of pkt RX, us precision, ISO 8601 'compact' format
		/// </summary>
		public DateTime? time { get; set; }
	}
	public class GatewayRxpkV2 : GatewayRxpk
	{
		/// <summary>
		/// GPS time of pkt RX, number of milliseconds since 01.Jan.1970
		/// </summary>
		public UInt64? time { get; set; }
	}
	#endregion

	#region GatewayTxAck
	public class GatewayTxAck
	{
		public string error { get; set; }
	}
	#endregion

	#region GatewayStat
	public class GatewayStat
	{
		/// <summary>
		/// UTC system time of the gateway. The precision is one second.
		/// The format is ISO 8601 expanded format
		/// </summary>
		public DateTime? time { get; set; }

		/// <summary>
		/// GPS latitude of the gateway in degree (float, N is +)
		/// </summary>
		[JsonProperty("lati")]
		public double? Latitude { get; set; }

		/// <summary>
		/// GPS latitude of the gateway in degree (float, E is +)
		/// </summary>
		[JsonProperty("long")]
		public double? Longitude { get; set; }

		/// <summary>
		/// GPS altitude of the gateway in meter RX (integer)
		/// </summary>
		public int? alti { get; set; }

		/// <summary>
		/// Number of radio packets received (unsigned integer)
		/// </summary>
		public uint? rxnb { get; set; }

		/// <summary>
		/// Number of radio packets received with a valid PHY CRC
		/// </summary>
		public uint? rxok { get; set; }

		/// <summary>
		/// Number of radio packets forwarded (unsigned integer)
		/// </summary>
		public uint? rxfw { get; set; }

		/// <summary>
		/// Percentage of upstream datagrams that were acknowledged
		/// </summary>
		public uint? ackr { get; set; }

		/// <summary>
		/// Number of downlink datagrams received (unsigned integer)
		/// </summary>
		public uint? dwnb { get; set; }

		/// <summary>
		/// Number of packets emitted (unsigned integer)
		/// </summary>
		public uint? txnb { get; set; }
	}
	#endregion

	#region GatewayTxpk
	public class GatewayTxpk
	{
		/// <summary>
		/// Send packet immediately (will ignore tmst & time)
		/// </summary>
		public bool? imme { get; set; }
		/// <summary>
		/// Send packet on a certain timestamp value (will ignore time)
		/// </summary>
		public UInt32? tmst { get; set; }
		/// <summary>
		/// TX central frequency in MHz (unsigned float, Hz precision)
		/// </summary>
		public double? freq { get; set; }
		/// <summary>
		/// Concentrator "RF chain" used for TX (unsigned integer)
		/// </summary>
		public int rfch { get; set; }
		/// <summary>
		/// TX output power in dBm (unsigned integer, dBm precision)
		/// </summary>
		public int? powe { get; set; }
		/// <summary>
		/// Modulation identifier "LORA" or "FSK"
		/// </summary>
		public string modu { get; set; }
		/// <summary>
		/// LoRa datarate identifier (eg. SF12BW500),
		/// FSK datarate (unsigned, in bits per second)
		/// </summary>
		public string datr { get; set; }
		/// <summary>
		/// LoRa ECC coding rate identifier
		/// </summary>
		public string codr { get; set; }
		/// <summary>
		/// FSK frequency deviation (unsigned integer, in Hz) 
		/// </summary>
		public int? fdev { get; set; }
		/// <summary>
		/// Lora modulation polarization inversion
		/// </summary>
		public bool ipol { get; set; }
		/// <summary>
		/// RF preamble size (unsigned integer)
		/// </summary>
		public int? prea { get; set; }
		/// <summary>
		/// RF packet payload size in bytes (unsigned integer)
		/// </summary>
		public int size { get; set; }
		/// <summary>
		/// Base64 encoded RF packet payload, padding optional
		/// </summary>
		public string data { get; set; }
		/// <summary>
		/// If true, disable the CRC of the physical layer (optional)
		/// </summary>
		public bool? ncrc { get; set; }
	}
	public class GatewayTxpkV1 : GatewayTxpk
	{
		/// <summary>
		/// Send packet at a certain time (GPS synchronization required)
		/// </summary>
		public DateTime? time { get; set; }
	}
	public class GatewayTxpkV2 : GatewayTxpk
	{
		/// <summary>
		/// Send packet at a certain time (GPS synchronization required)
		/// </summary>
		public UInt64? time { get; set; }
	}
	#endregion
}
